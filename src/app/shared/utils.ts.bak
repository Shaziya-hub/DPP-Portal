import { DatePipe } from "@angular/common";
import { removeSummaryDuplicates } from "@angular/compiler";
import { FormGroup } from "@angular/forms";
import * as _ from "lodash";
import { environment } from "src/environments/environment";
import { RowDetailsService } from "../services/row-details-service.service";

export enum ApiPaths {
    getMenuByUser = '/restv2/getMenuByUser',
    getPageConfig = '/restv2/getPageConfig',
    getBills = '/restv2/getBills',
    getSelectableColumns = '/restv2/getSelectableColumns',
    updateSelectableColumns = '/restv2/updateSelectableColumns',
    getNonSADADPmts = '/restv2/getNonSADADPmts',
    getAccounts = '/restv2/getAccounts',
    getRefunds = '/restv2/getRefunds',
    getPaymentBatches = '/restv2/getPaymentBatches',
    getPaymentTransactions = '/restv2/getPaymentTransactions',
    getPaymentTransactionDetails = '/restv2/getPaymentTransactionDetails',
    getPaymentTransactionExtRefs = '/restv2/getPaymentTransactionExtRefs',
    downloadFile = '/restv2/downloadFile?location=',
    getAccessControls = '/restv2/getAccessControls',
    updateAccessControls = '/restv2/updateAccessControls',
    getParameters = '/restv2/getParameters',
    createParameter = '/restv2/createParameter',
    updateParameters = '/restv2/updateParameters',
    getNonSADADPmtUploads='/restv2/getNonSADADPmtUploads',
    getBillUploads='/restv2/getBillUploads',
    getNonSADADPmtConfirmations='/restv2/getNonSADADPmtConfirmations',
    getBillConfirmations='/restv2/getBillConfirmations',
    getAccountConfirmations='/restv2/getAccountConfirmations',
    getAccountUploads='/restv2/getAccountUploads',
    getAccountConfirmation='/restv2/getAccountConfirmations',
    getReport='/restv2/getReport',
    getLimitAndLocks='/restv2/getLimitAndLocks',
    updateLimitAndLocks='/restv2/updateLimitsAndLocks',
    getProcessorConfig='/restv2/getProcessorConfig',
    getProcessorConfigDetails='/restv2/getProcessorConfigDetails',
    updateProcessorConfig='/restv2/updateProcessorConfig',
    updateProcessorConfigDetails='/restv2/updateProcessorConfigDetails',
    getReconciliationSummary='/restv2/getReconciliationSummary',
    getReconciliationDetails='/restv2/getReconciliationDetails',
    getEndPoints ='/restv2/getEndPoints',
    updateEndPoints='/restv2/updateEndPoints',
    getAdvancedAccessControls='/restv2/getAdvAccessControls',
    checkAdvAccessControls='/restv2/checkAdvAccessControls',
    updateAdvAccessControls='/restv2/updateAdvAccessControls',
    getMasterData='/restv2/getMasterData',
    getUsers='/restv2/getUsers',
    createUser='/restv2/createUser',
    updateUser='/restv2/updateUser',
    deleteUser='/restv2/deleteUser',
    getRolesByUser='/restv2/getRolesByUser',
    getRoles='/restv2/getRoles',
    deleteRole='/restv2/deleteRole',
    getResourcesByUser='/restv2/getResourcesByUser',
    createRole='/restv2/createRole',
    updateRole='/restv2/updateRole',
    getPaymentGWBatch='/restv2/getPaymentGWBatch',
    getReconPmtsRpt='/restv2/getReconPmtsRpt',
   
  }
export enum constantField{
    dateRangeMsg="You have selected more than "
}
export function deepClone(obj) {
    var _out = new obj.constructor;

    var getType = function (n) {
        return Object.prototype.toString.call(n).slice(8, -1);
    }

    for (var _key in obj) {
        if (obj.hasOwnProperty(_key)) {
            _out[_key] = getType(obj[_key]) === 'Object' || getType(obj[_key]) === 'Array' ? deepClone(obj[_key]) : obj[_key];
        }
    }
    return _out;
}

export function mobileCheck() {
    let check = false;
    ((a) => { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window['opera']);
    return check;
};

//Used to check the browser session space for saving the downloaded files and show alert on maximum saved
export function haveEnoughSessionStorageSpace() {
    var data = '';
    for (var key in window.sessionStorage) {
        if (window.sessionStorage.hasOwnProperty(key)) {
            data += window.sessionStorage[key];
        }
    }

    //Values are in KBs
    let totalSpaceUsed: any = ((data.length * 16) / (8 * 1024)).toFixed(2);
    let spaceRemaining: any = (5120 - (data.length * 16) / (8 * 1024)).toFixed(2);

    //console.log('Total space used: ' + totalSpaceUsed)
   // console.log('Space remaining: ' + spaceRemaining)

    let hasEnoughtStorage = spaceRemaining > environment.minimumSpaceAlertThresholdValue;

    return hasEnoughtStorage;
}

export function dateModalPosition() {
    let lang = localStorage.getItem('selectedLang');
    if (lang && lang == 'ar') {
        let elements = document.getElementsByClassName('cdk-overlay-pane owl-dt-popup')
        for (let index = 0; index < elements.length; index++) {
            setTimeout(() => {
                const element = <any>elements[index];
                element.style.right = element.style.left;
                element.style.left = 'auto';
            }, 50);
        }
    }
}

export function getUniqueData(data:any,attributeName:any){
 return   _.uniqBy (data, attributeName);
}

export enum TimeOutDetails{
    getPaymentTransactionsTimeout=20000,
    getPaymentTransactionExtRefsTimeOut=20000,
    getSelectableColumnsTimeout=20000,
    updateSelectableColumnsTimeout=20000,
    getOrUpdateDataTimeOut=20000,
    downloadFileTimeOut=60000,
    downloadTableDataTimeout=60000,
    getSummaryTableDataTimeout=20000,
    getPageConfigTimeout=20000,
    getMenuByUserTimeout=20000

    
}
export function isUserHasAccess(permissions:any){
    let hasPermission={
        view:false,
        add:false,
        edit:false,
        delete:false,
        download:false 
    }
    for(let permisson of permissions){
     if(permisson?.flag=='true' && permisson.type.toLowerCase()=="view"){ 
      hasPermission.view=true;
     }else if(permisson?.flag=='true' && permisson?.type.toLowerCase()=='add'){ 
        hasPermission.add=true 
     }else if(permisson?.flag=='true' && permisson?.type.toLowerCase()=='edit'){ 
     hasPermission.edit=true
    }else if(permisson?.flag=='true' && permisson?.type.toLowerCase()=='delete'){ 
   hasPermission.delete=true
    }else if(permisson?.flag=='true' && permisson?.type.toLowerCase()=='download'){ 
        hasPermission.download=true; 
    } 
    }
    return hasPermission;
   }
var clicks = 0, timeout;
export function doubleClick(doubleClickCallback) {
    clicks++;
    if (clicks == 2) {
        timeout && clearTimeout(timeout);
        doubleClickCallback(true);
        clicks = 0;
    }
    setTimeout(() => {
        timeout && clearTimeout(timeout);
        clicks = 0;
    }, 300);
    
}

export function validateDate(filters:any,fromDate:Date,dateTo:Date,datepipe:DatePipe) {
//console.log("filters is =>",filters);
if(filters?.SearchFilters?.fromDate !=null && filters?.SearchFilters?.toDate !=null){
  console.log("util fromDate",filters?.SearchFilters?.fromDate);
  console.log("utiltoDate",filters?.SearchFilters?.toDate);
 fromDate = new Date(filters?.SearchFilters?.fromDate); 
 dateTo = new Date(filters?.SearchFilters?.toDate); 


let fDate=datepipe.transform(fromDate, 'MM-dd-yyyy');
let toDate=  datepipe.transform(dateTo, 'MM-dd-yyyy');
 fromDate=new Date(fDate);
 dateTo=new Date(toDate);

//console.log(fromDate,"And toDate",dateTo);

 let Time = dateTo.getTime() - fromDate.getTime(); 
  let Days = Time / (1000 * 3600 * 24);
  //console.log("Days in Number",Days);
  return Days
}
return null;
}

export function getParenId(iniData:any,checkedData:any, pagentId:string,id:string,type:string){
    //console.log("---",iniData,checkedData,pagentId,id,type);
  let c=  iniData.filter(s=>s.pageId == id && s.parentId==pagentId && s.type==type).length;
  //parentId:sub.id,type:data?.type, pageId:suofSu.id, flag:data.flag
  //{parentId:parentPageId,type:type, pageId:id, flag:el.permissions.viewPermission.flag}
  //  console.log(c,"---");
  let d=  checkedData.filter(s=>s.pageId == id && s.parentId==pagentId && s.type==type).length;
   // console.log(d,"---",c);
  //  return   _.uniqBy (data, attributeName);
  return c==d
   }
   export function removeDuplicateFromListOfObject(listtoRempveDuplicate:any){
    const expected = new Set();
const unique = listtoRempveDuplicate.filter(item => !expected.has(JSON.stringify(item)) ? expected.add(JSON.stringify(item)) : false);
return unique   
}
   
export function getSelectedOrUnselectedList(event:any,menu:any,parentId:string,pageId:string,type:string,roledtailsSerices:RowDetailsService){
    let subscribeObj:any=[];
    roledtailsSerices.tempSelectedList$.subscribe(getExitMenu=>{
    getExitMenu  !=null?subscribeObj=getExitMenu:''

 })
    if(event.target.checked){
         if(menu.id==parentId){
           menu.subMenu.find(find=>find.id==pageId).permissions.forEach(setFlag=>{
           if (setFlag.type==type && setFlag.flag != 'na'){
                 setFlag.flag='true';
            }
           })
         //  console.log("countPer is ",countPer);
          
             if(subscribeObj !=null && subscribeObj!=undefined && subscribeObj.length>0){
            let existRole=   subscribeObj.find(find=>find.parentId==parentId);
             if(existRole && existRole !=null){
               let index= subscribeObj.findIndex(f=>f.parentId==parentId)
               index >-1?subscribeObj.splice(index,1):''
               subscribeObj.push({parentId:parentId,customMenu:menu});
               roledtailsSerices.setlistOfTempRole(subscribeObj)
        
            }else{
                subscribeObj.push({parentId:parentId,customMenu:menu})
                 roledtailsSerices.setlistOfTempRole(subscribeObj)
            }
            }else{
                roledtailsSerices.setlistOfTempRole([{parentId:parentId,customMenu:menu}])
            }

        }
      //  console.log(menu.find(parentId))
    }if(!event.target.checked){
        console.log("menu is uncheck",menu);
        if(menu.id==parentId){
            console.log( menu.subMenu.find(find=>find.id==pageId))
            menu.subMenu.find(find=>find.id==pageId).permissions.forEach(setFlag=>{
             setFlag.type==type?setFlag.flag='false':setFlag.flag=setFlag.flag
            })
         }

         if(subscribeObj !=null && subscribeObj!=undefined && subscribeObj.length>0){
            let existRole=   subscribeObj.find(find=>find.parentId==parentId);
             if(existRole && existRole !=null){
               let index= subscribeObj.findIndex(f=>f.parentId==parentId)
               index >-1?subscribeObj.splice(index,1):''
               subscribeObj.push({parentId:parentId,customMenu:menu});
               roledtailsSerices.setlistOfTempRole(subscribeObj)
        
            } 
            }
    }
   
   

}
export function selectAllOrDeselectAll(event , menu , parentId, roledtailsSerices){
    let subscribeObj:any=[];
           roledtailsSerices.tempSelectedList$.subscribe(getExitMenu=>{
            console.log("getExitMenu",getExitMenu)
           getExitMenu  !=null?subscribeObj=getExitMenu:''
             }) 
    if(event.target.checked){
        if(menu.id == parentId){
                menu.subMenu.forEach(submenu=>{
                submenu.permissions.forEach(perm=>{
                    perm.flag != 'na'? perm.flag='true': perm.flag
                })
            })
            

            if(subscribeObj !=null && subscribeObj!=undefined && subscribeObj.length>0){
                console.log("subscribeObj",subscribeObj)
                let existRole=   subscribeObj.find(find=>find.parentId==parentId);
                if(existRole && existRole !=null){
                    let index= subscribeObj.findIndex(f=>f.parentId==parentId)
                    index >-1?subscribeObj.splice(index,1):''
                    subscribeObj.push({parentId:parentId,customMenu:menu});
                    roledtailsSerices.setlistOfTempRole(subscribeObj)
                }
                else{
                subscribeObj.push({parentId:parentId,customMenu:menu})
                 roledtailsSerices.setlistOfTempRole(subscribeObj)
                }
            }
            
            else{
                roledtailsSerices.setlistOfTempRole([{parentId:parentId,customMenu:menu}])
            }
        }
    }

    if(!event.target.checked){
        if(menu.id == parentId){
            menu.subMenu.forEach(submenu=>{
                submenu.permissions.forEach(permission=>{
                    permission.flag != 'na'? permission.flag='false' : permission.flag
                })
            })
        }
        if(subscribeObj !=null && subscribeObj!=undefined && subscribeObj.length>0){
            console.log("uncheck subscribeObj",subscribeObj)
            let existRole=   subscribeObj.find(find=>find.parentId==parentId);
            if(existRole && existRole !=null){
                let index= subscribeObj.findIndex(f=>f.parentId==parentId)
                index >-1?subscribeObj.splice(index,1):''
                console.log('subscribeObj',existRole,subscribeObj)
               subscribeObj.push({parentId:parentId,customMenu:menu});
                roledtailsSerices.setlistOfTempRole(subscribeObj)
            }
            else{
            subscribeObj.push({parentId:parentId,customMenu:menu})
             roledtailsSerices.setlistOfTempRole(subscribeObj)
            }
            console.log("men",subscribeObj)
        }
        console.log("Unchecked in selectall util",menu)
    }
}

export function getTempSelectedList(rowDetailService:RowDetailsService){
     let tempList=null
     let unique=null
    rowDetailService.tempSelectedList$.subscribe(subscripb=>{
        tempList=subscripb
        
        unique =  getUniqueData(tempList,'parentId');
          
     }) 
     console.log("subscripb is ",tempList,unique)
     return unique;  
}
export function countOfSelectedList(rowDetailService){
    let temp = getTempSelectedList(rowDetailService)
    let getselectedCount:any=[]
   // this.searchFilters.resourceDetails.menu=[]
     temp?.forEach(f=>{
         let count=0
         f.customMenu.subMenu.forEach(submenu=>{
             submenu.permissions.forEach(per=>{
                 per.flag != 'na' && per.flag == 'true' ?count++ : count
             })
         })
         count>0 ? getselectedCount.push(f.customMenu):'';
        // flag>0? this.searchFilters.resourceDetails.menu.push(f.customMenu) :''
     })
     return getselectedCount;
}

export function selectAllColumn(event , menu , parentId, roledtailsSerices,type){
    let subscribeObj:any=[];
           roledtailsSerices.tempSelectedList$.subscribe(getExitMenu=>{
            console.log("getExitMenu",getExitMenu)
           getExitMenu  !=null?subscribeObj=getExitMenu:''
             }) 
    if(event.target.checked){
        if(menu.id == parentId){
                menu.subMenu.forEach(submenu=>{
                submenu.permissions.forEach(perm=>{
                    perm.flag != 'na' && perm.type ==type? perm.flag='true': perm.flag
                })
            })
            

            if(subscribeObj !=null && subscribeObj!=undefined && subscribeObj.length>0){
                console.log("subscribeObj",subscribeObj)
                let existRole=   subscribeObj.find(find=>find.parentId==parentId);
                if(existRole && existRole !=null){
                    let index= subscribeObj.findIndex(f=>f.parentId==parentId)
                    index >-1?subscribeObj.splice(index,1):''
                    subscribeObj.push({parentId:parentId,customMenu:menu});
                    roledtailsSerices.setlistOfTempRole(subscribeObj)
                }
                else{
                subscribeObj.push({parentId:parentId,customMenu:menu})
                 roledtailsSerices.setlistOfTempRole(subscribeObj)
                }
                console.log("men",subscribeObj)
            }
            
            else{
                roledtailsSerices.setlistOfTempRole([{parentId:parentId,customMenu:menu}])
            }
        }
    }

    if(!event.target.checked){
        if(menu.id == parentId){
            menu.subMenu.forEach(submenu=>{
                submenu.permissions.forEach(permission=>{
                    permission.flag != 'na' && permission.type==type? permission.flag='false' : permission.flag
                })
            })
        }
        if(subscribeObj !=null && subscribeObj!=undefined && subscribeObj.length>0){
            console.log("uncheck subscribeObj",subscribeObj)
            let existRole=   subscribeObj.find(find=>find.parentId==parentId);
            if(existRole && existRole !=null){
                let index= subscribeObj.findIndex(f=>f.parentId==parentId)
                index >-1?subscribeObj.splice(index,1):''
                console.log('subscribeObj',existRole,subscribeObj)
               subscribeObj.push({parentId:parentId,customMenu:menu});
                roledtailsSerices.setlistOfTempRole(subscribeObj)
            }
            else{
            subscribeObj.push({parentId:parentId,customMenu:menu})
             roledtailsSerices.setlistOfTempRole(subscribeObj)
            }
            console.log("men",subscribeObj)
        }
        console.log("Unchecked in selectall util",menu)
    }
}
 export default class Validation {
    static match(password: string, confirmPassword: string) {
      return (formGroup: FormGroup) => {
        const control = formGroup.controls[password];
        const checkControl = formGroup.controls[confirmPassword];
        if (checkControl?.errors && !checkControl.errors['matching']) {
          return null;
        }
        if (control?.value !== checkControl?.value) {
          checkControl?.setErrors({ matching: true });
          return { matching: true };
        } else {
          checkControl?.setErrors(null);
          return null;
        }
      };
    }
  }